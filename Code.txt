
## Regression Case Study -

## A research was conducted recently by state government to collect some health specific statistics 
## for different cities from 5 different states, the objective of the research was to collect the health and 
## medical facilities specific attributes of the cities which directly/indirectly impact the overall health 
## status of the city.

## the objective is to find the attributes and their relation with death rate in order to take 
## the necessary steps to prevent higher death rate.


#### 1. Data Processing ####
#### 1.1 Get the data
### data : health_data for different cities of 5 states


import os
import sys

os.path.dirname(sys.executable)

os.getcwd()

os.chdir("D:\Data Science Training\Data")

import pandas as pd

import numpy as np

data = pd.read_csv("Health_data_new.csv")




## Case Study 1 - Predict death_rate
### dependent variable : death_rate
### independent variables : doctor_availability_rate,hospital_availability_rate,
### annual_per_capita,population_density, State



data.info()



data.doctor_availability_rate.describe()



data.head()



### 1.2 Null Data Handling



pd.isna(data)

pd.isna(data.death_rate)

pd.isna(data.death_rate).value_counts()




## Handling missing values 

data.mean()

data.mean()['death_rate']


data['death_rate'] = data['death_rate'].fillna(data.mean()['death_rate'])





pd.isna(data.death_rate).value_counts()





#### 1.2  Categorical Data Handling using One hot Encoding


object_cols = list(data.select_dtypes(include=['category','object']))




object_cols

data.State.value_counts()

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

le = LabelEncoder()

ohe = OneHotEncoder(sparse=False)


State_le = le.fit_transform(data.State)

State_le

State_le = State_le.reshape(len(State_le),1)


State_ohe = ohe.fit(State_le)

State_New = State_ohe.transform(State_le)

State_New



State_New = pd.DataFrame(State_New)

State_New.columns = ['s1','s2','s3','s4','s5']


data = data.join(State_New[['s1','s2','s3','s4']])

data.info()

data.drop('State',axis=1,inplace=True)




#### 1.3 Splitting data into Training and Test Data Sets

import seaborn as sns

sns.distplot(data.death_rate)



from sklearn.model_selection import train_test_split


data.info()

data_X = data.iloc[:,[0,1,2,3,4,6,7,8,9]]

data_y = data[:]['death_rate']


X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, test_size=0.3, random_state=100)

X_train.info()

y_train

X_test.info()

y_test

sns.distplot(data.death_rate)

sns.distplot(y_train)

sns.distplot(y_test)



#### 2 building ML Models

## 2.1 Multiple Linear Regression

### dependent variable : death_rate
### independent variables : doctor_availability_rate,hospital_availability_rate,
### annual_per_capita,population_density, state (s1,s2,s3,s4,s5)

## Death Rate(y) = B0 + B1*doctor_availability_rate + B2*hospital_availability_rate +
## B3*annual_per_capita + B4*population_density + B5*s1 + B6*s2 +B7*s3 + B8*s4


## Feature Selection - Checking Correlation to get perfect set of independent variables



import seaborn as sns

sns.pairplot(data)

cr = data.corr()

cr['death_rate']

sns.heatmap(cr,annot=True,cmap="coolwarm")


## Conclusion - Selected independent variables :doctor_availability_rate, hospital_availability_rate,
### annual_per_capita,population_density



X_train.info()

X_train.drop(['City_ID','s1','s2','s3','s4'],axis=1,inplace=True)

X_train.info()

X_test.info()

X_test.drop(['City_ID','s1','s2','s3','s4'],axis=1,inplace=True)

X_test.info()


## Check for Linear Relation

import seaborn as sns; sns.set(color_codes=True)

ax = sns.regplot(x=X_train.doctor_availability_rate, y=y_train)

ax = sns.regplot(x=X_train.annual_per_capita, y=y_train)

ax = sns.regplot(x=X_train.population_density, y=y_train)

ax = sns.regplot(x=X_train.hospital_availability_rate, y=y_train)


## building linear Model

from sklearn import linear_model

lr = linear_model.LinearRegression()

# Train the model using the training sets

lr.fit(X_train,y_train)

lr.intercept_

lr.coef_

lr._residues


## Predicting death_rate for test dataset using model


y_pred = lr.predict(X_test)

res = pd.DataFrame({'y_act':y_test,'y_pred':y_pred})



## Evaluate your model using RMSE

import math

math.sqrt(((y_test-y_pred)**2).mean())



## Analyze your model performance visually


import matplotlib.pyplot as plt

from matplotlib.pyplot import figure


res = res.sort_values(by='y_act')

x1 = np.arange(1,len(y_test)+1)
y1 = res.y_act


y2 = res.y_pred

figure( figsize=(10, 8))
plt.plot(x1, y1)

figure( figsize=(10, 8))
plt.plot(x1,y2)

figure( figsize=(15, 12))
plt.plot(x1, y1,x1,y2)







